from google.colab import drive import zipfile
import os import shutil import random import math
import matplotlib.pyplot as plt import cv2
import numpy as np
from skimage.feature import hog from collections import Counter

# Mount Google Drive drive.mount('/content/drive')

# Path to the zip file in Google Drive
zip_file_path = '/content/drive/My Drive/kagglecatsanddogs_5340 (2).zip'

# Destination directory to extract the zip file extract_dir = '/content/dataset'

# Create the destination directory if it doesn't exist os.makedirs(extract_dir, exist_ok=True)

# Extract the zip file
with zipfile.ZipFile(zip_file_path, 'r') as zip_ref: zip_ref.extractall(extract_dir)

# Path to the extracted "PetImages" directory pet_images_dir = os.path.join(extract_dir, 'PetImages')

# Create separate directories for cats and dogs cats_dir = os.path.join(extract_dir, 'cats') dogs_dir = os.path.join(extract_dir, 'dogs') os.makedirs(cats_dir, exist_ok=True) os.makedirs(dogs_dir, exist_ok=True)

# Move cat images to the cats directory and dog images to the dogs directory for root, dirs, files in os.walk(pet_images_dir):
for file in files:
if file.endswith('.jpg'):
if 'Cat' in root:
shutil.move(os.path.join(root, file), os.path.join(cats_dir, file)) elif 'Dog' in root:
shutil.move(os.path.join(root, file), os.path.join(dogs_dir, file))

# List the number of cat and dog images num_cats = len(os.listdir(cats_dir)) num_dogs = len(os.listdir(dogs_dir))

print(f"Number of cat images: {num_cats}") print(f"Number of dog images: {num_dogs}")

# Define the percentage split train_percentage = 0.8
Test percentage = 0.2
# Function to split images into train and test sets
def split_data(src, train_dest, test_dest, train_percentage):
# Create directories if they don't exist os.makedirs(train_dest, exist_ok=True) os.makedirs(test_dest, exist_ok=True)

# Get list of image files files = os.listdir(src) random.shuffle(files)

# Calculate split indices
split_index = math.floor(len(files) * train_percentage)

# Split files into train and test sets train_files = files[:split_index] test_files = files[split_index:]

# Move files to train directory for file in train_files:
shutil.move(os.path.join(src, file), os.path.join(train_dest, file))

# Move files to test directory for file in test_files:
shutil.move(os.path.join(src, file), os.path.join(test_dest, file))

# Split cat images into train and test sets
split_data(cats_dir, os.path.join(extract_dir, 'cats_train'), os.path.join(extract_dir, 'cats_test'), train_percentage)

# Split dog images into train and test sets
split_data(dogs_dir, os.path.join(extract_dir, 'dogs_train'), os.path.join(extract_dir, 'dogs_test'), train_percentage)

# Function to load and display sample images with train and test splits def display_sample_images_with_split(train_dir, test_dir, label):
# Create subplots
fig, axes = plt.subplots(2, 5, figsize=(15, 6)) fig.suptitle(f"Sample {label} Images", fontsize=16)

# Load and display sample images from the training directory for i, ax in enumerate(axes[0]):
# Load the image
train_files = os.listdir(train_dir)
img_path = os.path.join(train_dir, train_files[i]) img = cv2.imread(img_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Display the image ax.imshow(img) ax.axis('off')

# Load and display sample images from the testing directory for i, ax in enumerate(axes[1]):
# Load the image
test_files = os.listdir(test_dir)
img_path = os.path.join(test_dir, test_files[i]) img = cv2.imread(img_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Display the image ax.imshow(img) ax.axis('off')

plt.show()

# Define directories for cats
cats_train_dir = '/content/dataset/cats_train' cats_test_dir = '/content/dataset/cats_test'

# Define directories for dogs
dogs_train_dir = '/content/dataset/dogs_train' dogs_test_dir = '/content/dataset/dogs_test'

# Display sample cat images with train and test splits display_sample_images_with_split(cats_train_dir, cats_test_dir, 'Cat')

# Display sample dog images with train and test splits display_sample_images_with_split(dogs_train_dir, dogs_test_dir, 'Dog')

# Function to extract HOG features and split data into training and testing sets def extract_features_with_split(train_dir, test_dir):
# Function to extract HOG features from a directory def extract_features(directory):
features = [] labels = [] hog_images = []

# Iterate over each image file in the directory for filename in os.listdir(directory):
img_path = os.path.join(directory, filename)

# Read the image
img = cv2.imread(img_path)

# Check if the image is successfully read if img is not None:
# Resize the image to (128, 128) for consistency img_resized = cv2.resize(img, (128, 128))

# Extract HOG features and HOG image
hog_features, hog_image = hog(img_resized, orientations=9, pixels_per_cell=(8, 8), cells_per_block=(2, 2), block_norm='L2-Hys',
visualize=True, multichannel=True, channel_axis=-1)

# Append the HOG features to the features list features.append(hog_features)

# Append the label (0 for cats, 1 for dogs) if 'cat' in directory:
labels.append(0) else:
labels.append(1)

# Append the HOG image to the hog_images list
hog_images.append(hog_image)
return np.array(features), np.array(labels), hog_images # Extract features and labels from the training directory
train_features, train_labels, train_hog_images = extract_features(train_dir)

# Extract features and labels from the testing directory
test_features, test_labels, test_hog_images = extract_features(test_dir)
return train_features, train_labels, test_features, test_labels, train_hog_images, test_hog_images # Extract features and split data into training and testing sets for cats
cat_train_features, cat_train_labels, cat_test_features, cat_test_labels, cat_train_hog_images,
cat_test_hog_images = extract_features_with_split(cats_train_dir, cats_test_dir)

# Extract features and split data into training and testing sets for dogs
dog_train_features, dog_train_labels, dog_test_features, dog_test_labels, dog_train_hog_images, dog_test_hog_images = extract_features_with_split(dogs_train_dir, dogs_test_dir)

# Function to display HOG images
def display_hog_images(hog_images, label):
fig, axes = plt.subplots(1, len(hog_images), figsize=(15, 6)) fig.suptitle(f"HOG {label} Images", fontsize=16)

for i, ax in enumerate(axes): ax.imshow(hog_images[i], cmap='gray') ax.axis('off')

plt.show()

# Print HOG images for cats display_hog_images(cat_train_hog_images[:5], 'Cat Train') display_hog_images(cat_test_hog_images[:5], 'Cat Test')

# Print HOG images for dogs display_hog_images(dog_train_hog_images[:5], 'Dog Train') display_hog_images(dog_test_hog_images[:5], 'Dog Test')

# Define Euclidean and Manhattan distance functions def euclidean_distance(x1, x2):
return np.sqrt(np.sum((x1 - x2) ** 2))

def manhattan_distance(x1, x2):
return np.sum(np.abs(x1 - x2))

# Function to perform k-NN classification
def k_nearest_neighbors(X_train, y_train, X_test, k, distance_metric='euclidean'): distances = []

# Calculate distances between test point and all training points for i in range(len(X_train)):
if distance_metric == 'euclidean':
dist = euclidean_distance(X_train[i], X_test) elif distance_metric == 'manhattan':
dist = manhattan_distance(X_train[i], X_test) distances.append((dist, y_train[i]))

# Sort distances in ascending order distances = sorted(distances)

# Choose k nearest neighbors k_nearest = distances[:k]

# Get the most frequent class among the k nearest neighbors nearest_labels = [label for (_, label) in k_nearest] most_common_label = Counter(nearest_labels).most_common(1)[0]
